trees.summary <- tally(trees.grouped)
##--- now dplyr method ---
# Count the number of trees for each species, with a pipe!
trees.summary <- trees %>%                   # the data frame object that will be passed in the pipe
group_by(CommonName) %>%    # don't need to name the object, just the grouping variable
tally()
# ctrl shift M for %>%
trees.subset <- trees %>%
filter(CommonName %in% c('Common Ash', 'Rowan', 'Scots Pine')) %>% #three species
group_by(CommonName, AgeGroup) %>% #age group and
tally() #count of each type
print(trees.subset)
#summary dataframe
summ.all <- summarise_all(trees, mean)
trees = as_tibble(read.csv(file = "trees.csv", header = TRUE, stringsAsFactors = F))
head(trees)
str(trees)
trees.grouped <- group_by(trees, CommonName)
trees.summary <- tally(trees.grouped)
# Count the number of trees for each species, with a pipe!
trees.summary <- trees %>%                   # the data frame object that will be passed in the pipe
group_by(CommonName) %>%    # don't need to name the object, just the grouping variable
tally()
trees.subset <- trees %>%
filter(CommonName %in% c('Common Ash', 'Rowan', 'Scots Pine')) %>% #three species
group_by(CommonName, AgeGroup) %>% #age group and
tally() #count of each type
print(trees.subset)
summ.all <- summarise_all(trees, mean)
trees = as_tibble(read.csv(file = "trees.csv", header = TRUE, stringsAsFactors = F))
head(trees)
print(trees.subset)
?islands
islands
hist(islands, breaks = 16)
round(mean(islands.z)) # rounds off to see M = 0
islands.z <- scale(islands) # M = 0, SD =1
round(mean(islands.z)) # rounds off to see M = 0
round(mean(islands.z)) # rounds off to see M = 0
sd(islands.z) # SD = 1
arr(islands.z, "scaled:center") # Show original mean
attr(islands.z, "scaled:center") # Show original mean
islands.z
islands.rank1 <- rank(islands)
hist(islands.rank1)
islands.rank1 <- rank(islands)
hist(islands.rank1) #reason not flat is because there are ties in frequency
boxplot(islands.rank1)
islands.rank2 <- rank(islands, ties.method = "random")
hist(islands.rank2)
boxplot(islands.rank2)
hist(islands.rank2)
rm(list = ls())  # Clean up
library(tidyverse)
library(sf)
library(tmap)
library(GISTools)
library(rgdal)
library(sp)
library(RColorBrewer)
library(reshape2)
library(rpart)
library(rpart.plot)
library(visNetwork)
library(caret)
library(randomForest)
library(ranger)
library(sparkline)
install.packages("psych")
library(mnormt)
library(psych)
rn1 <- rnorm(1000000)
hist(rn1)
summary(rn1)
rn2 <- rnorm(1000000)
hist(rn2)
summary(rn2)
rn.mean <- (rn1 + rn2)/2
hist(rn.mean)
rn.prod <- rn1 * rn2
hist(rn.prod)
summary(rn.prod)
kurtosi(rn1)
kurtosi(rn1) # should be close to zero
kurtosi(rn2) # should be close to zero
kurtosi(rn.mean) # should be close to zero
kurtosi(rn.prod)
rm(list = ls())
x1 <- c(1, 2, 3, NA, 5)
summary(x1)  # Works with NA
mean(x1)  # Doesn't work
# To find missing values
which(is.na(x1))  # Give index number
mean(x1, na.rm = T)
# Replace missing values with 0 (or other number)
# Option 1: Using "is.na"
x2 <- x1
x2[is.na(x2)] <- 0
x2
rm(list = ls())
install.packages("scatterplot3d")
data(mtcars)
mtcars[1:5, ]
mtcars1 <- mtcars[, c(1:4, 6:7, 9:11)]  # Select variables
mtcars1[1:5, ]
mtcars[1:5, ]
mtcars1 <- mtcars[, c(1:4, 6:7, 9:11)]  # Select variables
mtcars1[1:5, ]
# Need distance matrix (dissimilarity matrix)
d <- dist(mtcars1)
d  # Huge matrix
c <- hclust(d)
c
plot(c)
# Put observations in groups
# Need to specify either k = groups or h = height
g3 <- cutree(c, k = 3)  # "g3" = "groups 3"
g3
gm <- cutree(c, k = 2:5) # or k = c(2, 4)
gm
rect.hclust(c, k = 2, border = "gray")
rect.hclust(c, k = 3, border = "blue")
rect.hclust(c, k = 4, border = "green4")
rect.hclust(c, k = 5, border = "darkred")
km <- kmeans(mtcars1, 3)
km
require(cluster)
clusplot(mtcars1,  # data frame
km$cluster,  # cluster data
color = TRUE,  # color
#          shade = TRUE,  # Lines in clusters
lines = 3,  # Lines connecting centroids
labels = 2)  # Labels clusters and cases
rm(list = ls())  # Clean up
mtcars[1:5, ]
mtcars1 <- mtcars[, c(1:4, 6:7, 9:11)]  # Select variables
mtcars1[1:5, ]
pc <- prcomp(mtcars1,
center = TRUE,  # Centers means to 0 (optional)
scale = TRUE)
summary(pc)
plot(pc)
plot(pc)
# Get standard deviations and how variables load on PCs
pc
predict(pc)
biplot(pc)
factanal(mtcars1, 4)
?plot
setwd("~/GitHub/Data_Mining_Essentials")
install.packages("pacman")
# CREATE DATA
x <- runif(100, 0, 100)     # 100 points from uniform dist
y <- runif(100, 0, 80)      # Same for y values
z <- y + runif(100, 0, 20)  # Add random values to get z
plot(x, y)
plot(x, z)
plot(y, z)
plot3d(x, y, z)
plot3d(x, y, z)
pacman::p_load(rgl)
plot3d(x, y, z)
plot3d(x, y, z)
# Check if pacman is installed; if not, install it
if (!require("pacman")) install.packages("pacman")
p_load(psych)        # Load psych package
p_depends(psych)     # Check dependencies for psych
p_load(GPArotation)  # Install dependency
b5 <- read.csv("~/Desktop/b5.csv", header = T)
colnames(b5)  # Get column names
boxplot(b5)   # Boxplots for all Big 5 variables
# LOAD DATA #
# Read big5.csv from desktop
b5 <- read.csv("~/Data_Mining_Essentials/b5.csv", header = T)
# LOAD DATA #
# Read big5.csv from desktop
b5 <- read.csv("~/GitHub/Data_Mining_Essentials/b5.csv", header = T)
colnames(b5)  # Get column names
boxplot(b5)   # Boxplots for all Big 5 variables
colnames(b5)
pc0 <- principal(b5, nfactors = 5)
pc0
pc1 <- principal(b5, nfactors = 5, rotate = "oblimin")
pc1  # Check results
pc0
# First PCA with no rotation, specify 5 factors
pc0 <- principal(b5, nfactors = 5)
pc0
pc0
pc1 <- principal(b5, nfactors = 5, rotate = "oblimin")
pc1
# Plot position of variables on components
plot(pc1)
setwd("C:/Users/stuar/OneDrive/Documents/UNI leeds/Marine/predictive")
rm(list = ls()) #clear work space
# LOAD DATA
Inverts_Data = as_tibble(read.csv(file = "CCC_Data_all_raw_for_anal_no_reps.csv", header = TRUE, stringsAsFactors = F))
head(Inverts_Data)
str(Inverts_Data)
Data_select <- Inverts_Data[, c("year", "depth", "Density.per.hectare", "common","Horizontal.underwater.visibility..m.", "Water.temperature.at.10m...C.",
"Is.this.the.best.reef.in.the.area.", "Distance.to.nearest.population.centre..km.", "Distance.of.start.point.from.shore..m.","Is.this.site.sheltered.",
"Is.siltation.a.problem.", "Harvest.of.inverts.for.food", "Harvest.of.inverts.for.curio.sales", "Artisinal.recreational..personal.consumption.",
"Is.protection.enforced.", "MPA")]
badols = Data_select %>%
drop_na()
m2=(lm(Density.per.hectare~Horizontal.underwater.visibility..m.+Water.temperature.at.10m...C.+Distance.to.nearest.population.centre..km.
+factor(common)+factor(year)+factor(depth)+factor(Harvest.of.inverts.for.food)+factor(Is.siltation.a.problem.)+factor(Harvest.of.inverts.for.curio.sales)+factor(MPA)+factor(Is.protection.enforced.),
data = badols[!is.na(badols$Density.per.hectare),]))
ggplot(data.frame(Observed = badols$Density.per.hectare,
Predicted = m2$fitted.values),
aes(x = Observed, y = Predicted))+
geom_point(size = 1, alpha = 0.5)+
geom_smooth(method = "lm", col = "red")
hist(Data_select$Density.per.hectare, col = "cornflowerblue")
hist(log(Data_select$Density.per.hectare), col = "cornflowerblue")
density = Data_select[Data_select$Density.per.hectare >0,]
density = Data_select[Data_select$Density.per.hectare,]
density = Data_select[Data_select$Density.per.hectare]
density = Data_select[Data_select$Density.per.hectare = 0,]
density = Data_select[Data_select$Density.per.hectare == 0,]
density_zeros = Data_select[Data_select$Density.per.hectare == 0,]+1
density_zeros = Data_select[Data_select$Density.per.hectare == 0,] +1
density = Data_select[Data_select$Density.per.hectare]
density = Data_select$Density.per.hectare
?dplyr
browseVignettes(package = "dplyr")
browseVignettes(package = "dplyr")
density = Data_select %>%
Density.per.hectare
density = Data_select %>%
Data_select$Density.per.hectare
Data_select %>% filter(Density.per.hectare == 0)
summary(Data_select)
?dplyr::select
?dplyr::filter
?dplyr::mutate
Data_select %>%
dplyr::mutate(Density.per.hectare = (Density.per.hectare)+1)
Data_select %>% filter(Density.per.hectare)
Data_select %>% (Density.per.hectare)
Data_select %>% filter(Density.per.hectare > 0)
Data_select %>%
dplyr::mutate(Density.per.hectare = (Density.per.hectare)+1) -> Data_select
Data_select
hist(log(Data_select$Density.per.hectare), col = "cornflowerblue")
View(Data_select)
View(Data_select)
Summary(Data_select)
Data_select
summary(Data_select$Density.per.hectare)
hist(log(Data_select$Density.per.hectare), col = "cornflowerblue")
hist(Data_select$Density.per.hectare, col = "cornflowerblue")
hist(log(Data_select$Density.per.hectare), col = "cornflowerblue")
hist(Data_select$Density.per.hectare, col = "cornflowerblue")
Data_select$Density.per.hectare = log(Data_select$Density.per.hectare)
summary(Data_select$Density.per.hectare)
Data_select %>% MPA %>%
dplyr::filter(MPA = I) %>%
dplyr::mutate(MPA_yes = 1)
Data_select %>%
dplyr::filter(MPA = I) %>%
dplyr::mutate(MPA_yes = 1)
Data_select %>%
dplyr::filter(MPA == I) %>%
dplyr::mutate(MPA_yes = 1)
Data_select %>%
dplyr::filter(MPA == i) %>%
dplyr::mutate(MPA_yes = 1)
Data_select %>%
dplyr::filter(MPA == I) %>%
dplyr::mutate(MPA_yes = 1)
Data_select %>%
dplyr::filter(MPA = I) %>%
dplyr::mutate(MPA_yes = 1)
rlang::last_error()
Data_select %>%
dplyr::filter(MPA = "I") %>%
dplyr::mutate(MPA_yes = 1)
Data_select %>%
dplyr::filter(MPA == "I") %>%
dplyr::mutate(MPA_yes = 1)
Data_select %>%
dplyr::filter(MPA == "I") %>%
dplyr::mutate(MPA_yes = 1) <-new
###MPA
new <- Data_select %>%
dplyr::filter(MPA == "I") %>%
dplyr::mutate(MPA_yes = 1)
rm(list = ls()) #clear work space
library(tidyverse)
library(sf)
library(tmap)
library(GISTools)
library(rgdal)
library(sp)
library(RColorBrewer)
library(reshape2)
library(rpart)
library(rpart.plot)
library(visNetwork)
library(caret)
library(randomForest)
library(ranger)
library(usdm)
library(sparkline)
library(sdm)
library(rgbif)
library(dismo)
library(raster)
library(mapview)
library(rJava)
library(parallel)
library(vegan)
library(mnormt)
library(psych)
install.packages("reticulate")
library(reticulate)
setwd("C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool")
# Loads Python Shell
repl_python()
# Check the current Python version
reticulate::py_config()
yes
quit
repl_python()
quit
reticulate::py_config()
library(tidyverse)
library(sf)
library(tmap)
library(GISTools)
library(rgdal)
library(sp)
library(RColorBrewer)
library(reshape2)
library(rpart)
library(rpart.plot)
library(visNetwork)
library(caret)
library(randomForest)
library(ranger)
library(usdm)
library(sparkline)
library(sdm)
library(rgbif)
library(dismo)
library(raster)
library(mapview)
library(rJava)
library(parallel)
library(vegan)
library(mnormt)
library(psych)
sp <- gbif("Lynx","pardinus",download = f) #check occurances
sp <- gbif("Lynx","pardinus",download = T, geo=T,sp=F) # Download
sp <- gbif("Lynx","pardinus",download = f) #check occurances
sp <- gbif("Lynx","pardinus",download = F) #check occurances
sp <- gbif("Lynx","pardinus",download = T, geo=T,sp=F) # Download
sp <- gbif("Lynx","pardinus",download = F)
sp
sp <- gbif("Lynx","pardinus",download = T, geo=T,sp=F)
#remove NA values in lat and lon
w <- which(is.na(sp$lon))
sp <-sp[-w,]
sp$species <- 1    #add new column species
sp <- sp[,c('lon','lat','species')]    #remove uneeded columns
head(sp)
coordinates(sp) <- ~lon + lat #make species into spatial points
class(sp)
head(sp)  #this is presence only data
bio <- raster::getData('worldclim',var='bio',res=10) #bioclim data resolution 10m
bio #19 bioclim variables
v1 <- vifstep(bio) #checking vif for collinearity
v1
biom <- exclude(bio,v1)
biom #9 remaining variables
raster::plot(biom[[1]]) #plot predictor variables
?plot
points(sp, cex=0.5,pch=16) #plot points of data
proj4string(sp)  # check projection (should be undefined)
proj4string(sp) <-projection(raster()) #set projection by making empty raster and assigning its projection
mapview(sp)
head(sp)
d <-sdmData(species~., sp, predictors = biom) #species should be lone column, training = sp, then predictors
d
#currently only Presence only data - so create pseudo background data
? sdmData
d <-sdmData(species~., sp, predictors = biom, bg = list(n=1000)) #1000 background points
#bg points randomly selct it across the study area
#can make it distributed geographical area 'gRandom'
d
head(sp)
d <-sdmData(species~., sp, predictors = biom
d
d <-sdmData(species~., sp, predictors = biom)
d
d <-sdmData(species~., sp, predictors = biom, bg = list(n=1000)) #1000 background points
d
m <-sdm(species~., d, methods=c('glm','svm','rf','brt','mars'),
replication=c('boot'),n=2)
m
p <- predict(m, biom, 'predictions.img', overwrite=T) #can add mean =T to do ave model result
p
m <-sdm(species~., d, methods=c('glm','svm','rf'),
replication=c('boot'),n=2) #set number of bootstraping
p
raster::plot(p[[2]])
m <-sdm(species~., d, methods=c('glm','svm','rf'),
replication=c('boot'),n=2) #set number of bootstraping
p <- predict(m, biom, 'predictions.img', overwrite=T)
p
raster::plot(p[[2]])
raster::plot(p[[2]])
raster::plot(p[])
raster::plot(p[[]])
raster::plot(p[[1]])
raster::plot(p[[2]])
raster::plot(p[[]])
raster::plot(p[])
en <- ensemble(m, biom, 'ens.img',
setting=list(method='weights',stat="TSS",opt=2))
biof <- raster::getData('CMIP5',var='bio',res=10,rcp=85,year=70,model='AC')
names(biof)
names(bio)
names(biof) <-names(bio) #correct names
names(biof)
pf <- predict(m, biof, 'predictionsf.img')
enf <- calc(pf, mean)
enf <- ensemble(m, biof, 'ensf.img',
setting=list(method='weights', stat="TSS", opt=2))
plot(stack(en, enf)) #compare current and future
plot(enf) #future ensemble
rm(list = ls())
install.packages("shiny")
library(shiny)
library(tidyverse)
library(sf)
library(tmap)
library(GISTools)
library(rgdal)
library(sp)
library(RColorBrewer)
library(reshape2)
library(rpart)
library(rpart.plot)
library(visNetwork)
library(caret)
library(randomForest)
library(ranger)
library(usdm)
library(sparkline)
library(sdm)
library(rgbif)
library(dismo)
library(raster)
library(mapview)
library(rJava)
library(parallel)
library(vegan)
library(mnormt)
library(psych)
setwd("C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool")
detach("package:shiny", unload = TRUE)
library(shiny)
runApp
setwd("C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool")
runApp
library(shiny)
setwd(C:\Users\stuar\OneDrive\Documents\UNI leeds\geog5060\SDM_tool)
setwd(C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool)
setwd(C:Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool)
setwd("C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool")
runApp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runExample("02_text")
runExample("02_text")
library(shiny)
shinyServer (
pageWithSidebar(
headerPanel("SDM Model"),
sidebarPanel("Side Bar"),
mainPanel("Main Panel")
)
)
shinyServer (
pageWithSidebar(
headerPanel("SDM Model"),
sidebarPanel("Side Bar"),
mainPanel("Main Panel")
)
)
library(shiny)
shinyServer (
pageWithSidebar(
headerPanel("SDM Model"),
sidebarPanel("Side Bar"),
mainPanel("Main Panel")
)
)
runApp()
runApp('App')
runApp('App')
runApp('App')
