))
library(shiny)
server <- shinyServer(function(input, output) {
output$occurances <- renderText({
# generate species data
genus_name <- input$Genus_name
species_name <- input$Species_name
sp <- gbif(genus_name,species_name,download = T, geo=T,sp=F) #check occurances
# write down the number of occurances downloaded
sp_occurences <- gbif(genus_name,species_name,download = F) #check occurances
sp_occurences
})
output$HSM_map <- renderPlot({
# generate species data
genus_name <- input$Genus_name
species_name <- input$Species_name
sp <- gbif(genus_name,species_name,download = T, geo=T,sp=F)
w <- which(is.na(sp$lon))
sp <-sp[-w,]
sp$species <- 1    #add new column species
sp <- sp[,c('lon','lat','species')]    #remove uneeded columns
coordinates(sp) <- ~lon + lat
#plot the points
proj4string(sp) <-projection(raster()) #set projection by making empty raster and assigning its projection
bio <- raster::getData('worldclim',var='bio',res=10)
v1 <- vifstep(bio)
biom <- exclude(bio,v1)
d <-sdmData(species~., sp, predictors = biom, bg = list(n=1000))
m <-sdm(species~., d, methods=c('rf'),
replication=c('boot'),n=3)
p <- predict(m, biom, 'predictions.img', overwrite=T)
raster::plot(p[[1]])
})
})
ui <-shinyUI(fluidPage(
# Application title
titlePanel("Create Your Own Habitat Suitability Model"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput("Species_name",
"species",
value = "",
placeholder = "Enter species Lower Case"),
textInput("Genus_name",
"Genius",
value = "",
placeholder = "Enter Genus Upper Case")
),
# Show a plot of the generated distribution
mainPanel(
textOutput("occurances"),
plotOutput("HSM_map")
)
)
))
source('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App/App_apply.R')
source('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App/App_apply.R')
source('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App/App_apply.R')
source('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App/App_apply.R')
sp <- gbif("Petrogale","xanthopus",download = F)
sp <- gbif("Petrogale","xanthopus",download = F)
library(shiny)
library(tidyverse)
library(sf)
library(tmap)
library(GISTools)
library(rgdal)
library(sp)
library(RColorBrewer)
library(reshape2)
library(rpart)
library(rpart.plot)
library(visNetwork)
library(caret)
library(randomForest)
library(ranger)
library(usdm)
library(sparkline)
library(sdm)
library(rgbif)
library(dismo)
library(raster)
library(mapview)
library(rJava)
library(parallel)
library(vegan)
library(mnormt)
library(psych)
sp <- gbif("Petrogale","xanthopus",download = F)
sp
############  check and load data  ##############
#sp = spatial point, geo means give coordinates
#?gbif
#capitalisation matters
#Camelus bactrianus
#Varecia rubra
sp <- gbif("Indri","indri",download = F) #check occurances
sp
sp <- gbif("Microcebus","danfossi",download = F)
sp
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
############  check and load data  ##############
#sp = spatial point, geo means give coordinates
?gbif
sp <- gbif("Varecia","rubr",download = F)
sp
#capitalisation matters
#Camelus bactrianus
# Microcebus danfossi
#Varecia rubr
sp <- gbif("Varecia","rubra",download = F) #check occurances
sp
sp <- gbif("Varecia","rubra",download = T, geo=T,sp=F,end=30) # Download
sp <- gbif("Avahi","meridionalis",download = F)
sp
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
sp <- gbif("Canis","lupus",download = F)
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
#capitalisation matters
#Camelus bactrianus
# Microcebus danfossi
#Varecia rubra
sp <- gbif("Avahi","occidentalis",download = F) #check occurances
sp
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App_1')
#capitalisation matters
#Camelus bactrianus
# Microcebus danfossi
#Varecia rubra
sp <- gbif("cleesei","Avahi",download = F) #check occurances
sp
#capitalisation matters
#Camelus bactrianus
# Microcebus danfossi
#Varecia rubra
sp <- gbif("Daubentonia","madagascariensis",download = F) #check occurances
sp
sp <- gbif("Hapalemur","aureus",download = F)
sp
rm(list = ls())
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
library(mnormt)
sp <- gbif("Hapalemur","aureus",download = F)
rm(list = ls()) #clear work space
library(shiny)
library(tidyverse)
library(sf)
library(tmap)
library(GISTools)
library(rgdal)
library(sp)
library(RColorBrewer)
library(reshape2)
library(rpart)
library(rpart.plot)
library(visNetwork)
library(caret)
library(randomForest)
library(ranger)
library(usdm)
library(sparkline)
library(sdm)
library(rgbif)
library(dismo)
library(raster)
library(mapview)
library(rJava)
library(parallel)
library(vegan)
library(mnormt)
library(psych)
library(shiny)
library(tidyverse)
library(sf)
library(tmap)
library(GISTools)
library(rgdal)
library(sp)
library(RColorBrewer)
library(reshape2)
library(rpart)
library(rpart.plot)
library(visNetwork)
library(caret)
library(randomForest)
library(ranger)
library(usdm)
library(sparkline)
library(sdm)
library(rgbif)
library(dismo)
library(raster)
library(mapview)
library(rJava)
library(parallel)
library(vegan)
library(mnormt)
library(psych)
sp <- gbif("Hapalemur","aureus",download = F)
sp
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
shiny::runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
shiny::runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
?addMarkers
sp <- gbif("Camelus","bactrianus",download = T, geo=T,sp=F,end=30)
w <- which(is.na(sp$lon))
sp <-sp[-w,]
sp$species <- 1    #add new column species
sp <- sp[,c('lon','lat','species')]    #remove uneeded columns
#head(sp)
coordinates(sp) <- ~lon + lat #make species into spatial points
#class(sp)
proj4string(sp)  # check projection (should be undefined)
proj4string(sp) <-projection(raster())
addMarkers(sp)
addMarkers(data = sp)
addMarkers(data = sp)
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp()
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
rm(list = ls()) #clear work space
library(shiny)
library(tidyverse)
library(sf)
library(tmap)
library(GISTools)
library(rgdal)
library(sp)
library(RColorBrewer)
library(reshape2)
library(rpart)
library(rpart.plot)
library(visNetwork)
library(caret)
library(randomForest)
library(ranger)
library(usdm)
library(sparkline)
library(sdm)
library(rgbif)
library(dismo)
library(raster)
library(mapview)
library(rJava)
library(parallel)
library(vegan)
library(mnormt)
library(psych)
sp <- gbif("Varecia","rubra",download = T, geo=T,sp=F,end=30)
w <- which(is.na(sp$lon))
sp <-sp[-w,]
sp$species <- 1    #add new column species
sp <- sp[,c('lon','lat','species')]
coordinates(sp) <- ~lon + lat
bio <- raster::getData('worldclim',var='bio',res=10) #bioclim data resolution 10m
bio #19 bioclim variables
v1 <- vifstep(bio) #checking vif for collinearity
v1
biom <- exclude(bio,v1)
biom
d <-sdmData(species~., sp, predictors = biom)
d <-sdmData(species~., sp, predictors = biom, bg = list(n=1000))
m <-sdm(species~., d, methods=c('rf'),
replication=c('boot'),n=3)
p <- predict(m, biom, 'predictions.img', overwrite=T)
raster::plot(p[[1]])
en <- ensemble(m, biom, 'ens.img',
setting=list(method='weights',stat="TSS",opt=2))
biof <- raster::getData('CMIP5',var='bio',res=10,rcp=85,year=66,model='AC')
biof <- raster::getData('CMIP5',var='bio',res=10,rcp=85,year=40,model='AC')
biof <- raster::getData('CMIP5',var='bio',res=10,rcp=85,year=50,model='AC')
biof <- raster::getData('CMIP5',var='bio',res=10,rcp=85,year=30,model='AC')
biof <- raster::getData('CMIP5',var='bio',res=10,rcp=85,year=55,model='AC')
biof <- raster::getData('CMIP5',var='bio',res=10,rcp=85,year=60,model='AC')
biof <- raster::getData('CMIP5',var='bio',res=10,rcp=85,year=70,model='AC')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/SDM_Tool')
shiny::runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/SDM_Tool')
shiny::runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/SDM_Tool')
rm(list = ls())
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/Test/App_test')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/SDM_Tool')
genus_name <- Panthera
sp <- gbif(Panthera,pardus,download = T, geo=T,sp=F, end=200)
w <- which(is.na(sp$lon))
sp <-sp[-w,]
sp$species <- 1    #add new column species
sp <- sp[,c('lon','lat','species')]    #remove uneeded columns
coordinates(sp) <- ~lon + lat
#plot the points
proj4string(sp) <-projection(raster()) #set projection by making empty raster and assigning its projection
bio <- raster::getData('worldclim',var='bio',res=10)
v1 <- vifstep(bio)
biom <- exclude(bio,v1)
d <-sdmData(species~., sp, predictors = biom, bg = list(n=500)) #Prepare the species data
m <-sdm(species~., d, methods=c('rf'),
replication=c('boot'),n=2)
p <- predict(m, biom, 'predictions.img', overwrite=T)
raster::plot(p[[1]])
library(shiny)
library(tidyverse)
library(sf)
library(tmap)
library(GISTools)
library(rgdal)
library(sp)
library(RColorBrewer)
library(reshape2)
library(rpart)
library(rpart.plot)
library(visNetwork)
library(caret)
library(randomForest)
library(ranger)
library(usdm)
library(sparkline)
library(sdm)
library(rgbif)
library(dismo)
library(raster)
library(mapview)
library(rJava)
library(parallel)
library(vegan)
library(mnormt)
library(psych)
sp <- gbif(Panthera,pardus,download = T, geo=T,sp=F, end=200)
w <- which(is.na(sp$lon))
sp <-sp[-w,]
sp$species <- 1    #add new column species
sp <- sp[,c('lon','lat','species')]    #remove uneeded columns
coordinates(sp) <- ~lon + lat
#plot the points
proj4string(sp) <-projection(raster()) #set projection by making empty raster and assigning its projection
bio <- raster::getData('worldclim',var='bio',res=10)
v1 <- vifstep(bio)
biom <- exclude(bio,v1)
d <-sdmData(species~., sp, predictors = biom, bg = list(n=500)) #Prepare the species data
m <-sdm(species~., d, methods=c('rf'),
replication=c('boot'),n=2)
p <- predict(m, biom, 'predictions.img', overwrite=T)
raster::plot(p[[1]])
sp <- gbif("Panthera","pardus",download = T, geo=T,sp=F,end=30)
sp <- gbif("Panthera","pardus",download = T, geo=T,sp=F,end=200)
View(sp)
w <- which(is.na(sp$lon))
sp <-sp[-w,]
sp$species <- 1
sp <- sp[,c('lon','lat','species')]
coordinates(sp) <- ~lon + lat
View(sp)
sp <- gbif("Panthera","pardus",download = T, geo=T,sp=F,end=200)
w <- which(is.na(sp$lon))
View(sp)
sp <-sp[-w,]
View(sp)
sp <- gbif("Panthera","pardus",download = T, geo=T,sp=F,end=1000)
head(sp)
sp$species <- 1
sp <- sp[,c('lon','lat','species')]
View(sp)
w <- which(is.na(sp$lon))
sp <-sp[-w,]
sp <- gbif(Panthera,pardus,download = T, geo=T,sp=F, end=200)
sp$species <- 1    #add new column species
sp <- gbif("Panthera","pardus",download = T, geo=T,sp=F, end=200)
rm(list = ls())
sp <- gbif("Panthera","pardus",download = T, geo=T,sp=F, end=200)
sp$species <- 1    #add new column species
sp <- sp[,c('lon','lat','species')]
View(sp)
w <- which(is.na(sp$lon))
sp <-sp[-w,]
sp <- gbif("Panthera","pardus",download = T, geo=T,sp=F, end=200)
sp$species <- 1    #add new column species
sp <- sp[,c('lon','lat','species')]
View(sp)
View(sp)
w <- which(is.na(sp$lon))
w
?[]
?[]
w <- +1
sp <-sp[-w,]
coordinates(sp) <- ~lon + lat
sp <- gbif("Panthera","pardus",download = T, geo=T,sp=F, end=1000)
sp$species <- 1    #add new column species
sp <- sp[,c('lon','lat','species')]
w <- which(is.na(sp$lon))
w <- +1
w <- which(is.na(sp$lon))
w <- which(is.na(sp$lon)) %/%
+1
sp <-sp[-w,]
sp <- gbif("Panthera","pardus",download = T, geo=T,sp=F, end=200)
sp$species <- 1    #add new column species
sp <- sp[,c('lon','lat','species')]    #remove uneeded columns
w <- which(is.na(sp$lon)) %/%
+1
w <- which(is.na(sp$lon)) %>%
+1
w <- which(is.na(sp$lon)) %>%
+1 = w
which(is.na(sp$lon)) %>%
+1 = w
which(is.na(sp$lon)) %>%
+1 <- w
if w != numeric(empty)
sp <-sp[-w,]
w <- which(is.na(sp$lon))
sp <- sp[,c('lon','lat','species')]
sp <- gbif("Panthera","pardus",download = T, geo=T,sp=F, end=1000)
w <- which(is.na(sp$lon))
w
w <- +1
w <- which(is.na(sp$lon))+1
w
w <- which(is.na(sp$lon))+[1]
w <- which(is.na(sp$lon))+(1)
w
tester <- c(1,1)
w <- which(is.na(sp$lon))+tester
w
w <- which(is.na(sp$lon))+tester
w
sp <- sp[,c('lon','lat','species')]    #remove uneeded columns
w <- which(is.na(sp$lon))
w
w <- which(is.na(sp$lon))+tester
w
tester <- c(0,1)
w <- which(is.na(sp$lon))+tester
w
tester <- c(1,0)
w <- which(is.na(sp$lon))+tester
w
matrixc <- cbind(w, c(1))
sp <-sp[-matrixc,]
sp <- gbif("Panthera","pardus",download = T, geo=T,sp=F, end=200)
sp$species <- 1    #add new column species
sp <- sp[,c('lon','lat','species')]
w <- which(is.na(sp$lon))
matrixc <- cbind(w, c(1))
sp <-sp[-matrixc,]
coordinates(sp) <- ~lon + lat
proj4string(sp) <-projection(raster())
bio <- raster::getData('worldclim',var='bio',res=10)
v1 <- vifstep(bio)
biom <- exclude(bio,v1)
d <-sdmData(species~., sp, predictors = biom, bg = list(n=500)) #Prepare the species data
m <-sdm(species~., d, methods=c('rf'),
replication=c('boot'),n=2)
p <- predict(m, biom, 'predictions.img', overwrite=T)
raster::plot(p[[1]])
sp <- gbif("Panthera","pardus",download = T, geo=T,sp=F, end=1000)
sp$species <- 1    #add new column species
sp <- sp[,c('lon','lat','species')]    #remove uneeded columns
w <- which(is.na(sp$lon))
matrixc <- cbind(w, c(1))
#matrixc
#if w != numeric(empty)
sp <-sp[-matrixc,]
coordinates(sp) <- ~lon + lat
#plot the points
proj4string(sp) <-projection(raster()) #set projection by making empty raster and assigning its projection
bio <- raster::getData('worldclim',var='bio',res=10)
v1 <- vifstep(bio)
biom <- exclude(bio,v1)
d <-sdmData(species~., sp, predictors = biom, bg = list(n=500)) #Prepare the species data
m <-sdm(species~., d, methods=c('rf'),
replication=c('boot'),n=2)
p <- predict(m, biom, 'predictions.img', overwrite=T)
raster::plot(p[[1]])
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/SDM_Tool')
sp <- gbif("Betula","pendula",download = T, geo=T,sp=F, end=1000)
sp <- gbif("Betula","pendula",download = T, geo=T,sp=F, end=1000)
?gbif
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/SDM_Tool')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/SDM_Tool')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/SDM_Tool')
?gbif
?predict
shiny::runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/SDM_Tool')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/SDM_Tool')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/SDM_Tool')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/SDM_Tool')
