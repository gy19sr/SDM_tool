referendum_data <- read_csv("https://www.electoralcommission.org.uk/sites/default/files/2019-07/EU-referendum-result-data.csv")
library(tidyverse)
library(sf)
library(tmap)
referendum_data <- read_csv("https://www.electoralcommission.org.uk/sites/default/files/2019-07/EU-referendum-result-data.csv")
region_summary <- referendum_data %>%
group_by(Region) %>%
summarise(share_leave=sum(Leave)/sum(Valid_Votes)) %>%
arrange(desc(share_leave))
print(region_summary)
referendum_data <- referendum_data %>%
mutate(share_leave=Leave/Valid_Votes,
margin_leave=share_leave-0.5 )
referendum_data %>%
filter(Area!="Gibraltar") %>%
ggplot(aes(x=reorder(Area,-share_leave), y=margin_leave, fill=margin_leave))+
geom_bar(stat="identity", width=1)+
scale_fill_distiller(palette = 5, type="div", direction=1, guide="colourbar", limits=c(-0.3,0.3))+
scale_x_discrete(breaks=c("Lambeth","Slough","Boston")) +
geom_hline(aes(yintercept=0))+
theme_classic()+
xlab("LAs by Leave (asc)")+
ylab("Margin Leave/Remain")
shiny::runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App_1')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App_1')
library(shiny)
library(tidyverse)
library(sf)
library(tmap)
library(GISTools)
library(rgdal)
library(sp)
library(RColorBrewer)
library(reshape2)
library(rpart)
library(rpart.plot)
library(visNetwork)
library(caret)
library(randomForest)
library(ranger)
library(usdm)
library(sparkline)
library(sdm)
library(rgbif)
library(dismo)
library(raster)
library(mapview)
library(rJava)
library(parallel)
library(vegan)
library(mnormt)
library(psych)
sp <- gbif("Lynx","pardinus",download = F) #check occurances
sp
sp <- gbif("Lynx","pardinus",download = T, geo=T,sp=F) # Download
length(sp)
w <- which(is.na(sp$lon))
sp <-sp[-w,]
sp <- sp[,c('lon','lat','species')]
coordinates(sp) <- ~lon + lat
coordinates(sp) <- ~lon + lat
sp$species <- 1
sp <- sp[,c('lon','lat','species')]
coordinates(sp) <- ~lon + lat
w <- which(is.na(sp$lon))
sp <-sp[-w,]
sp <- gbif("Lynx","pardinus",download = T, geo=T,sp=F) # Download
w <- which(is.na(sp$lon))
sp <-sp[-w,]
sp$species <- 1    #add new column species
sp <- sp[,c('lon','lat','species')]    #remove uneeded columns
#head(sp)
coordinates(sp) <- ~lon + lat #make species into spatial points
raster::plot(sp)
points(sp, cex=0.5,pch=16)
points(sp, cex=0.5,pch=16)
raster::plot(sp)
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App_1')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App_1')
proj4string(sp)
proj4string(sp) <-projection(raster())
mapview(sp)
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App_1')
d <-sdmData(species~., sp, predictors = biom)
#bio clim
bio <- raster::getData('worldclim',var='bio',res=10) #bioclim data resolution 10m
v1 <- vifstep(bio) #checking vif for collinearity
biom <- exclude(bio,v1)
######### viewing a basic map #############
raster::plot(biom[[1]]) #plot predictor variables
points(sp, cex=0.5,pch=16) #plot points of data
d <-sdmData(species~., sp, predictors = biom) #species should be lone column, training = sp, then predictors
d
#currently only Presence only data - so create pseudo background data
#? sdmData
d <-sdmData(species~., sp, predictors = biom, bg = list(n=1000)) #1000 background points
#train and test (still to add)
#need to select methods
#getmethodNames()
m <-sdm(species~., d, methods=c('rf'),
replication=c('boot'),n=1)
#predict probably current distribution
p <- predict(m, biom, 'predictions.img', overwrite=T) #can add mean =T to do ave model result
raster::plot(p[])
raster::plot(p[[1]]) #plot differenct model results
raster::plot(p[[1]])
raster::plot(p[[0]]) #plot differenct model results
raster::plot(p[[]])
raster::plot(p[[0]])
raster::plot(p[])
raster::plot(p[[0]])
raster::plot(p[[]])
m <-sdm(species~., d, methods=c('rf'),
replication=c('boot'),n=3)
m
p <- predict(m, biom, 'predictions.img', overwrite=T)
raster::plot(p[[1]])
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App_1')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App_1')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App_1')
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App_1')
sp <- gbif("Camelus","bactrianus",download = F) #check occurances
sp
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App_1')
shiny::runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App_1')
library(shiny)
library(tidyverse)
library(sf)
library(tmap)
library(GISTools)
library(rgdal)
library(sp)
library(RColorBrewer)
library(reshape2)
library(rpart)
library(rpart.plot)
library(visNetwork)
library(caret)
library(randomForest)
library(ranger)
library(usdm)
library(sparkline)
library(sdm)
library(rgbif)
library(dismo)
library(raster)
library(mapview)
library(rJava)
library(parallel)
library(vegan)
library(mnormt)
library(psych)
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App_1')
sp <- gbif("Vespa","mandarinia",download = F)
sp
sp <- gbif("Varecia","rubra",download = F)
sp
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App_1')
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
#check if package then only install if neccessary
#
?require
library(mnormt)
library(psych)
if (!require(abind)) install.packages('abind')
library(abind)
if (!require(abind)) install.packages('abind')
library(abind)
if (!require(car)) install.packages('car')
library(car)
runApp('C:/Users/stuar/OneDrive/Documents/UNI leeds/geog5060/SDM_tool/App_1')
